---
description: Project Rules and Coding Guidelines
globs: *
alwaysApply: false
---
# Dotbox Components Development Guidelines

## Project Structure

dotbox-components/
├── components/           # Source components
│   ├── base/             # Base component and styles
│   │   ├── base-component.js  # Base component class
│   │   ├── base-styles.css    # Base styles
│   │   ├── component-documentation-schema.json # Documentation schema
│   │   └── components-index.json # Master component registry
│   ├── button/           # Button component
│   │   ├── button.js     # Button component class
│   │   ├── button.css    # Button-specific styles
│   │   └── button.json   # Button documentation
│   └── [other components follow same pattern]
├── kitchensink/          # Component showcase
│   ├── js/               # Kitchensink JavaScript files
│   │   ├── components-registry.js # Registry access module
│   │   ├── components-nav.js # Navigation component
│   │   ├── components-list.js # Component list for home page
│   │   └── [other JS files]
│   ├── partials/         # Component partial HTML files
│   └── index.html        # Main kitchensink page with dynamic loading
├── README.md             # Project documentation
└── server.js             # Development server

Registry: All components must be in components/base/components-index.json with name, displayName, icon, description, path, and docPath
Files: Each component needs directory with matching JS, CSS, and JSON files
Naming: Use Dotbox[ComponentName] for class, dotbox-[component-name] for tag
Development Rules
Components
Extend DotboxBaseComponent
Include JSDoc with @element, @prop, @csspart, @slot, @fires
Define properties(), styles() (include super.styles), constructor with defaults
Register with customElements.define()
Call super.connectedCallback() first, then this.loadComponentStyles()
CSS & Icons
Load global dependencies in components/index.js
Use loadComponentStyles() for component CSS
No inline styles for core styling
Use <i class="fa [icon-name]"></i> for FontAwesome
FontAwesome in shadow DOM handled by base component
Kitchensink
Create partial in kitchensink/partials/
Include description, examples, and documentation renderer
For new components: add to registry first, create partial, export in index.js
Documentation
Keep README updated
Maintain JSON docs matching schema in component-documentation-schema.json
Include name, description, properties, CSS parts, slots, events, examples
Use documentation generator as starting point
Adding Components
Add to registry first
Create component files (JS, CSS, JSON)
Implement class extending base component
Export in index.js
Create kitchensink partial
Update README
Avoid
Forgetting to add to registry
Loading dependencies separately
Modifying base component without updating derivatives
Direct DOM manipulation outside Lit
Skipping super.connectedCallback()
Using inline styles
Creating JSON docs manually
Inconsistent documentation
Always reuse existing components and maintain consistent styling across the library.